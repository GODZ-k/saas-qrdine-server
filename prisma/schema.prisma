generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// demo model ----->

model Demo {
  id           String    @id @default(cuid())
  firstName    String    @db.VarChar(200)
  lastName     String    @db.VarChar(200)
  email        String    @unique @db.VarChar(200)
  phone        String    @unique @db.VarChar(15)
  message      String?   @db.VarChar(500)
  preferedTime DateTime?
  staffId      String?
  staff        User?     @relation("StaffDemos", fields: [staffId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// staff model -------->

enum UserRole {
  ADMIN
  USER
  STAFF
}

// model Staff {
//   id        Int      @id @default(autoincrement())
//   // Name      String   @db.VarChar(200)
//   // Email     String   @unique @db.VarChar(200)
//   // Phone     String   @unique @db.VarChar(15)
//   // Role      UserRole @default(STAFF)
//   isActive  Boolean  @default(true)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// user model -------->

model User {
  id                String         @id @default(cuid())
  firstName         String?        @db.VarChar(200)
  lastName          String?        @db.VarChar(200)
  avatar            String?
  username          String?        @unique
  emailAddress      String?        @unique
  subscriptionId    String?        @unique
  restaurantId      String?        @unique
  role              UserRole       @default(USER)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  lastActiveAt      DateTime?
  lastSignInAt      DateTime?
  isSubscribed      Boolean        @default(false)
  isActive          Boolean        @default(true)
  isBanned          Boolean        @default(false)
  mfaEnabled        Boolean        @default(false)
  twoFactorEnabled  Boolean        @default(false)
  locked            Boolean        @default(false)
  backupCodeEnabled Boolean        @default(false)
  // Relations
  emailAddresses    EmailAddress[] @relation("UserEmailAddress")
  demos             Demo[]         @relation("StaffDemos")
  phoneNumbers      Phone[]        @relation("UserPhoneno")
  subscription      Subscription?  @relation("UserSubscription", fields: [subscriptionId], references: [id])
  restaurant        Restaurant?    @relation("UserRestaurant", fields: [restaurantId], references: [id])
}

model Phone {
  id          String   @id @default(cuid())
  userId      String
  phoneNumber String
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User? @relation("UserPhoneno", fields: [userId], references: [id], onDelete: Cascade)
}

model EmailAddress {
  id           String   @id @default(cuid())
  emailAddress String   @unique
  userId       String
  createdAt    DateTime @default(now())
  verification String
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation("UserEmailAddress", fields: [userId], references: [id], onDelete: Cascade)
}

// restaurant info model --------->

model Restaurant {
  id                    String              @id @default(cuid())
  restaurantName        String              @db.VarChar(200)
  restaurantUrl         String              @db.VarChar(200)
  restaurantType        String              @db.VarChar(200)
  foodMenu              String              @db.VarChar(500)
  tables                Int                 @default(0)
  staffCount            Int                 @default(0)
  location              String              @db.VarChar(200)
  businessEmail         String              @unique @db.VarChar(300)
  businessContactNumber Int                 @unique
  companyName           String              @db.VarChar(200)
  ownerName             String              @db.VarChar(200)
  restaurantAddress     String              @unique
  userId                User?               @relation("UserRestaurant")
  restaurantLegalInfo   String              @unique
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  // relations -->
  restaurantlegalinfo   RestaurantLegalInfo @relation("RestaurantLegalInfo", fields: [restaurantLegalInfo], references: [id])
  restaurantaddress     RestaurantAddress   @relation("RestaurantAddress", fields: [restaurantAddress], references: [id])
}

// restaurant address model --------->

model RestaurantAddress {
  id           String      @id @default(cuid())
  address      String      @db.VarChar(500)
  restaurantId Restaurant? @relation("RestaurantAddress")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

// restaurant legal info model ------------->

model RestaurantLegalInfo {
  id              String      @id @default(cuid())
  gst             String      @unique @db.VarChar(15)
  fssaiLicence    String      @db.VarChar(500)
  msmeCertificate String      @db.VarChar(500)
  companyPan      String      @db.VarChar(500)
  phoneNo         String      @unique @db.VarChar(15)
  directorPan     String      @db.VarChar(500)
  directorAadhar  String      @db.VarChar(500)
  email           String      @unique @db.VarChar(200)
  cancelCheque    String      @db.VarChar(500)
  restaurantId    Restaurant? @relation("RestaurantLegalInfo")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

// user subscription model ------>

enum PlanType {
  BASIC
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  CREATED
  AUTHENTICATED
  EXPIRED
  CANCELLED
  PAUSED
  COMPLETED
  PENDING
  HALTED
}

model Subscription {
  id                  String             @id @default(cuid())
  planId              String
  userId              User?            @relation("UserSubscription")
  customerId          String?            @unique
  status              SubscriptionStatus @default(CREATED)
  quantity            Int
  totalCount          Int
  paidCount           Int
  remainingCount      Int
  startAt             DateTime           @default(now())
  endAt               DateTime
  expireBy            DateTime
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  endedAt             DateTime
  shortUrl            String             @db.VarChar(255)
  hasScheduledChanges Boolean            @default(false)
  changeScheduledAt   DateTime
  offer_id            String             @db.VarChar(255)

  payments Payment[] @relation("Payments")
  plan     Plan      @relation("SubscribePlans", fields: [planId], references: [id])
}

// Product model ------->

enum Currency {
  INR
  USD
  EUR
}

enum PlanInterval {
  MONTHLY
  YEARLY
  DAILY
  WEEKLY
}

model Plan {
  id            String         @id @default(cuid())
  name          PlanType       @default(BASIC)
  amount        Int
  currency      Currency       @default(INR)
  interval      PlanInterval
  isActive      Boolean        @default(true)
  description   String         @db.VarChar(300)
  hsnCode       String         @db.VarChar(50)
  sacCode       String         @db.VarChar(50)
  taxInclusive  Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[] @relation("SubscribePlans")
}

// Payment model  --------->

enum PaymentStatus {
  INITIATED
  AUTHORIZED
  SUCCESS
  REFUNDED
  FAILED
}

model Payment {
  id                   String        @id @default(cuid())
  amount               Int
  cusId                String
  currency             Currency      @default(INR)
  status               PaymentStatus @default(INITIATED)
  paymentMethod        String        @db.VarChar(255)
  bank                 String?
  vpd                  String?
  bankTransitionId     String?
  amountRefunded       Int           @default(0)
  wallet               String?
  acquirerTransitionId String?
  email                String        @db.VarChar(255)
  contact              String        @db.VarChar(255)
  invoice              String        @unique
  cardId               String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  // relation -->
  card                 Card?         @relation("UserCard", fields: [cardId], references: [id])
  subscription         Subscription  @relation("Payments", fields: [cusId], references: [customerId])
}

enum CardType {
  CREDIT
  DEBIT
}

model Card {
  id          String    @id @default(uuid())
  name        String
  last4       Int
  network     String    @db.VarChar(200)
  cardType    CardType  @default(DEBIT)
  expireMonth Int
  expireYear  Int
  payment     Payment[] @relation("UserCard")
}
